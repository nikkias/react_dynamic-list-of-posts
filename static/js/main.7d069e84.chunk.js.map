{"version":3,"sources":["components/PostsList.tsx","components/Loader/Loader.tsx","components/NewCommentForm.tsx","utils/fetchClient.ts","services/PostComments.ts","components/PostDetails.tsx","components/UserSelector.tsx","App.tsx","services/users.ts","services/userPost.ts","index.tsx"],"names":["PostsList","posts","selectedPost","setSelectedPost","className","map","post","id","title","type","classNames","onClick","handleOpenPost","Loader","initialComment","name","body","email","initialErrors","NewCommentForm","handleCreateComment","isCommentLoading","useState","comment","setComment","errors","setErrors","handleChange","field","value","prevErrors","prevComment","onSubmit","e","preventDefault","isNameValid","trim","isEmailValid","isBodyValid","htmlFor","placeholder","cn","onChange","target","BASE_URL","wait","delay","Promise","resolve","setTimeout","request","url","a","method","data","options","JSON","stringify","headers","all","fetch","response","ok","json","reject","client","deleteComment","commentId","PostDetails","comments","arePostsLoading","isLoadingError","isWritingComment","deletingCommentId","state","setState","noCommentCondtion","length","showCommentsCondition","loadComments","useCallback","prev","loadedComments","handleCommentDelete","filter","newComment","postId","newPost","useEffect","commentBody","href","UserSelector","users","selectedUser","setSelectedUser","isBtnActive","setIsBtnActive","onBlur","role","user","onMouseDown","App","setUsers","setPosts","arePostLoading","setArePostLoading","setIsLoadingError","loadUsers","loadedUsers","Error","loadPosts","userId","loadedPosts","noPostCondition","postListCondition","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.7d069e84.chunk.js","sourcesContent":["/* eslint-disable jsx-a11y/control-has-associated-label */\nimport React from 'react';\nimport classNames from 'classnames';\nimport { Post } from '../types/Post';\n\ntype Props = {\n  posts: Post[];\n  selectedPost: Post | null;\n  setSelectedPost: (post: Post | null) => void\n};\n\nexport const PostsList: React.FC<Props> = ({\n  posts,\n  selectedPost,\n  setSelectedPost,\n}) => {\n  const handleOpenPost = (post: Post) => {\n    setSelectedPost(selectedPost?.id === post.id ? null : post);\n  };\n\n  return (\n    <div data-cy=\"PostsList\">\n      <p className=\"title\">Posts:</p>\n\n      <table className=\"table is-fullwidth is-striped is-hoverable is-narrow\">\n        <thead>\n          <tr className=\"has-background-link-light\">\n            <th>#</th>\n            <th>Title</th>\n            <th> </th>\n          </tr>\n        </thead>\n\n        <tbody>\n          {posts.map(post => (\n            <tr data-cy=\"Post\" key={post.id}>\n              <td data-cy=\"PostId\">\n                {post.id}\n              </td>\n\n              <td data-cy=\"PostTitle\">\n                {post.title}\n              </td>\n\n              <td className=\"has-text-right is-vcentered\">\n                <button\n                  type=\"button\"\n                  data-cy=\"PostButton\"\n                  className={classNames('button is-link', {\n                    'is-light': selectedPost?.id !== post.id,\n                  })}\n                  onClick={() => handleOpenPost(post)}\n                >\n                  {selectedPost?.id !== post.id\n                    ? 'Open'\n                    : 'Close'}\n                </button>\n              </td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </div>\n  );\n};\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","/* eslint-disable react/button-has-type */\nimport React, { useState } from 'react';\nimport cn from 'classnames';\n\nimport { CommentData } from '../types/Comment';\n\ntype Props = {\n  handleCreateComment: (comment: CommentData) => void;\n  isCommentLoading: boolean;\n};\n\nconst initialComment: CommentData = {\n  name: '',\n  body: '',\n  email: '',\n};\n\nconst initialErrors = {\n  name: false,\n  email: false,\n  body: false,\n};\n\nexport const NewCommentForm: React.FC<Props> = ({\n  handleCreateComment,\n  isCommentLoading,\n}) => {\n  const [comment, setComment] = useState<CommentData>(initialComment);\n  const [errors, setErrors] = useState(initialErrors);\n\n  const handleChange = (field: string, value: string) => {\n    setErrors((prevErrors) => ({\n      ...prevErrors,\n      [field]: false,\n    }));\n    setComment((prevComment) => ({\n      ...prevComment,\n      [field]: value,\n    }));\n  };\n\n  const handleClear = () => {\n    setComment(initialComment);\n    setErrors(initialErrors);\n  };\n\n  const clearAfterAdd = () => {\n    setComment((prevComment) => ({\n      ...prevComment,\n      body: '',\n    }));\n    setErrors(initialErrors);\n  };\n\n  const onAddComment = (e: React.FormEvent) => {\n    e.preventDefault();\n\n    const isNameValid = comment.name.trim();\n    const isEmailValid = comment.email.trim();\n    const isBodyValid = comment.body.trim();\n\n    const isAllInformationValid = isNameValid && isEmailValid && isBodyValid;\n\n    if (!isAllInformationValid) {\n      setErrors({\n        name: !isNameValid,\n        email: !isEmailValid,\n        body: !isBodyValid,\n      });\n    } else {\n      handleCreateComment(comment);\n      clearAfterAdd();\n    }\n  };\n\n  return (\n    <form data-cy=\"NewCommentForm\" onSubmit={onAddComment}>\n      <div className=\"field\" data-cy=\"NameField\">\n        <label className=\"label\" htmlFor=\"comment-author-name\">\n          Author Name\n        </label>\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"name\"\n            id=\"comment-author-name\"\n            placeholder=\"Name Surname\"\n            className={cn('input', { 'is-danger': errors.name })}\n            value={comment.name}\n            onChange={(e) => handleChange('name', e.target.value)}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-user\" />\n          </span>\n          <span\n            className=\"icon is-small is-right has-text-danger\"\n            data-cy=\"ErrorIcon\"\n          >\n            {errors.name && (\n              <i className=\"fas fa-exclamation-triangle\" />\n            )}\n          </span>\n        </div>\n\n        {errors.name && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Name is required\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"EmailField\">\n        <label className=\"label\" htmlFor=\"comment-author-email\">\n          Author Email\n        </label>\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"email\"\n            id=\"comment-author-email\"\n            placeholder=\"email@test.com\"\n            className={cn('input', { 'is-danger': errors.email })}\n            value={comment.email}\n            onChange={(e) => handleChange('email', e.target.value)}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-envelope\" />\n          </span>\n          <span\n            className=\"icon is-small is-right has-text-danger\"\n            data-cy=\"ErrorIcon\"\n          >\n            {errors.email && (\n              <i className=\"fas fa-exclamation-triangle\" />\n            )}\n          </span>\n        </div>\n\n        {errors.email && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Email is required\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"BodyField\">\n        <label className=\"label\" htmlFor=\"comment-body\">\n          Comment Text\n        </label>\n        <div className=\"control\">\n          <textarea\n            id=\"comment-body\"\n            name=\"body\"\n            placeholder=\"Type comment here\"\n            className={cn('textarea', { 'is-danger': errors.body })}\n            value={comment.body}\n            onChange={(e) => handleChange('body', e.target.value)}\n          />\n        </div>\n\n        {errors.body && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Enter some text\n          </p>\n        )}\n      </div>\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button\n            type=\"submit\"\n            className={cn(\n              'button',\n              'is-link',\n              { 'is-loading': isCommentLoading },\n            )}\n          >\n            Add\n          </button>\n        </div>\n\n        <div className=\"control\">\n          <button\n            type=\"reset\"\n            className=\"button is-link is-light\"\n            onClick={handleClear}\n          >\n            Clear\n          </button>\n        </div>\n      </div>\n    </form>\n  );\n};\n","/* eslint-disable @typescript-eslint/no-explicit-any */\nconst BASE_URL = 'https://mate.academy/students-api';\n\n// a promise resolved after a given delay\nfunction wait(delay: number) {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\n// To have autocompletion and avoid mistypes\ntype RequestMethod = 'GET' | 'POST' | 'PATCH' | 'DELETE';\n\nasync function request<T>(\n  url: string,\n  method: RequestMethod = 'GET',\n  data: any = null, // we can send any data to the server\n): Promise<T> {\n  const options: RequestInit = { method };\n\n  if (data) {\n    // We add body and Content-Type only for the requests with data\n    options.body = JSON.stringify(data);\n    options.headers = {\n      'Content-Type': 'application/json; charset=UTF-8',\n    };\n  }\n\n  // for a demo purpose we emulate a delay to see if Loaders work\n  const [response] = await Promise.all([\n    fetch(BASE_URL + url, options),\n    wait(300),\n  ]);\n\n  return response.ok\n    ? response.json()\n    : Promise.reject();\n}\n\nexport const client = {\n  get: <T>(url: string) => request<T>(url),\n  post: <T>(url: string, data: any) => request<T>(url, 'POST', data),\n  patch: <T>(url: string, data: any) => request<T>(url, 'PATCH', data),\n  delete: (url: string) => request(url, 'DELETE'),\n};\n","import { Comment } from '../types/Comment';\nimport { client } from '../utils/fetchClient';\n\nexport const getComments = (postId: number) => {\n  return client.get<Comment[]>(`/comments?postId=${postId}`);\n};\n\nexport const deleteComment = (commentId: number) => {\n  return client.delete(`/comments/${commentId}`);\n};\n\nexport const addComment = (comment: Omit<Comment, 'id'>) => {\n  return client.post<Comment>('/comments', comment);\n};\n","import React, { useState, useEffect, useCallback } from 'react';\nimport cn from 'classnames';\nimport { Loader } from './Loader';\nimport { NewCommentForm } from './NewCommentForm';\nimport { Comment, CommentData } from '../types/Comment';\nimport {\n  addComment,\n  deleteComment,\n  getComments,\n} from '../services/PostComments';\n\ntype Props = {\n  title: string;\n  body: string;\n  id: number;\n};\n\ntype DelComment = number | null;\n\nexport const PostDetails: React.FC<Props> = ({ title, body, id }) => {\n  const [state, setState] = useState({\n    comments: [] as Comment[],\n    arePostsLoading: true,\n    isLoadingError: false,\n    isWritingComment: false,\n    isCommentLoading: false,\n    deletingCommentId: null as DelComment,\n  });\n\n  const noCommentCondtion = !state.arePostsLoading\n  && !state.isLoadingError && state.comments.length === 0;\n\n  const showCommentsCondition = !state.arePostsLoading\n  && !state.isLoadingError && state.comments.length > 0;\n\n  const loadComments = useCallback(async () => {\n    setState((prev) => ({ ...prev, arePostsLoading: true }));\n    try {\n      setState((prev) => ({ ...prev, isLoadingError: false }));\n      const loadedComments = await getComments(id);\n\n      setState((prev) => ({ ...prev, comments: loadedComments }));\n    } catch {\n      setState((prev) => ({ ...prev, isLoadingError: true }));\n    } finally {\n      setState((prev) => ({ ...prev, arePostsLoading: false }));\n    }\n  }, [id]);\n\n  const handleCommentDelete = async (commentId: number) => {\n    setState((prev) => ({ ...prev, deletingCommentId: commentId }));\n    try {\n      await deleteComment(commentId);\n      setState((prev) => ({\n        ...prev,\n        comments: prev.comments.filter((comment) => comment.id !== commentId),\n      }));\n    } catch {\n      setState((prev) => ({ ...prev, isLoadingError: true }));\n    } finally {\n      setState((prev) => ({ ...prev, deletingCommentId: null }));\n    }\n  };\n\n  const handleCreateComment = async (newComment: CommentData) => {\n    setState((prev) => ({ ...prev, isCommentLoading: true }));\n    try {\n      const newPost = await addComment({\n        ...newComment,\n        postId: id,\n      });\n\n      setState((prev) => ({ ...prev, comments: [...prev.comments, newPost] }));\n    } catch {\n      setState((prev) => ({ ...prev, isLoadingError: true }));\n    } finally {\n      setState((prev) => ({ ...prev, isCommentLoading: false }));\n    }\n  };\n\n  useEffect(() => {\n    loadComments();\n    setState((prev) => ({ ...prev, isWritingComment: false }));\n  }, [loadComments, id]);\n\n  return (\n    <div className=\"content\" data-cy=\"PostDetails\">\n      <div className=\"content\" data-cy=\"PostDetails\">\n        <div className=\"block\">\n          <h2 data-cy=\"PostTitle\">{title}</h2>\n          <p data-cy=\"PostBody\">{body}</p>\n        </div>\n\n        <div className=\"block\">\n          {state.arePostsLoading && <Loader />}\n\n          {!state.arePostsLoading && state.isLoadingError && (\n            <div className=\"notification is-danger\" data-cy=\"CommentsError\">\n              Something went wrong\n            </div>\n          )}\n\n          {noCommentCondtion && (\n            <p className=\"title is-4\" data-cy=\"NoCommentsMessage\">\n              No comments yet\n            </p>\n          )}\n\n          {showCommentsCondition && (\n            <>\n              <p className=\"title is-4\">Comments:</p>\n\n              {state.comments\n                .map(({\n                  id: commentId,\n                  email,\n                  name,\n                  body: commentBody,\n                }) => (\n                  <article\n                    className={cn('message', 'is-small', {\n                      'is-loading-custom':\n                      state.deletingCommentId === commentId,\n                    })}\n                    data-cy=\"Comment\"\n                    key={commentId}\n                  >\n                    <div className=\"message-header\">\n                      <a href={`mailto:${email}`} data-cy=\"CommentAuthor\">\n                        {name}\n                      </a>\n                      <button\n                        data-cy=\"CommentDelete\"\n                        type=\"button\"\n                        className=\"delete is-small\"\n                        aria-label=\"delete\"\n                        onClick={() => {\n                          handleCommentDelete(commentId);\n                        }}\n                      >\n                        delete button\n                      </button>\n                    </div>\n\n                    <div className=\"message-body\" data-cy=\"CommentBody\">\n                      {commentBody}\n                    </div>\n                  </article>\n                ))}\n            </>\n          )}\n        </div>\n\n        {(!state.isWritingComment || state.isLoadingError) && (\n          <button\n            data-cy=\"WriteCommentButton\"\n            type=\"button\"\n            className=\"button is-link\"\n            onClick={\n              () => setState((prev) => ({ ...prev, isWritingComment: true }))\n            }\n          >\n            Write a comment\n          </button>\n        )}\n\n        {state.isWritingComment && !state.isLoadingError && (\n          <NewCommentForm\n            handleCreateComment={handleCreateComment}\n            isCommentLoading={state.isCommentLoading}\n          />\n        )}\n      </div>\n    </div>\n  );\n};\n","import React, { useState } from 'react';\nimport classNames from 'classnames';\nimport { User } from '../types/User';\n\ntype Props = {\n  users: User[],\n  selectedUser: User | null,\n  setSelectedUser: (user: User | null) => void,\n};\n\nexport const UserSelector: React.FC<Props> = ({\n  users,\n  selectedUser,\n  setSelectedUser,\n}) => {\n  const [isBtnActive, setIsBtnActive] = useState<boolean>(false);\n\n  return (\n    <div\n      data-cy=\"UserSelector\"\n      className={classNames(\n        'dropdown',\n        { 'is-active': isBtnActive },\n      )}\n    >\n      <div className=\"dropdown-trigger\">\n        <button\n          type=\"button\"\n          className=\"button\"\n          aria-haspopup=\"true\"\n          aria-controls=\"dropdown-menu\"\n          onClick={() => setIsBtnActive(!isBtnActive)}\n          onBlur={() => setIsBtnActive(false)}\n        >\n          <span>\n            {selectedUser ? selectedUser.name : 'Choose a user'}\n          </span>\n\n          <span className=\"icon is-small\">\n            <i className=\"fas fa-angle-down\" aria-hidden=\"true\" />\n          </span>\n        </button>\n      </div>\n\n      <div className=\"dropdown-menu\" id=\"dropdown-menu\" role=\"menu\">\n        <div className=\"dropdown-content\">\n          {users.map(user => (\n            <a\n              href={`#user-${user.id}`}\n              className={classNames(\n                'dropdown-item',\n                { 'is-active': selectedUser?.id === user.id },\n              )}\n              key={user.id}\n              onMouseDown={() => setSelectedUser(user)}\n            >\n              {user.name}\n            </a>\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n};\n","import React, { useCallback, useEffect, useState } from 'react';\nimport 'bulma/bulma.sass';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport './App.scss';\n\nimport classNames from 'classnames';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { UserSelector } from './components/UserSelector';\nimport { Loader } from './components/Loader';\nimport { User } from './types/User';\nimport { Post } from './types/Post';\nimport { getUsers } from './services/users';\nimport { getPosts } from './services/userPost';\n\nexport const App: React.FC = () => {\n  const [users, setUsers] = useState<User[]>([]);\n  const [selectedUser, setSelectedUser] = useState<User | null>(null);\n  const [posts, setPosts] = useState<Post[]>([]);\n  const [arePostLoading, setArePostLoading] = useState(false);\n  const [isLoadingError, setIsLoadingError] = useState(false);\n  const [selectedPost, setSelectedPost] = useState<Post | null>(null);\n\n  const loadUsers = async () => {\n    try {\n      const loadedUsers = await getUsers();\n\n      setUsers(loadedUsers);\n    } catch {\n      throw new Error('Failed to load users');\n    }\n  };\n\n  const loadPosts = useCallback(async () => {\n    if (selectedUser) {\n      setArePostLoading(true);\n\n      try {\n        const loadedPosts = await getPosts(selectedUser?.id);\n\n        setPosts(loadedPosts);\n        setIsLoadingError(false);\n      } catch {\n        setIsLoadingError(true);\n      } finally {\n        setArePostLoading(false);\n      }\n    }\n  }, [selectedUser]);\n\n  useEffect(() => {\n    loadPosts();\n\n    setSelectedPost(null);\n  }, [selectedUser, loadPosts]);\n\n  useEffect(() => {\n    loadUsers();\n  }, []);\n\n  const noPostCondition = (\n    !arePostLoading\n    && !isLoadingError\n    && !posts.length\n    && selectedUser\n  );\n\n  const postListCondition = (\n    !arePostLoading\n    && !!posts.length\n    && !isLoadingError\n  );\n\n  return (\n    <main className=\"section\">\n      <div className=\"container\">\n        <div className=\"tile is-ancestor\">\n          <div className=\"tile is-parent\">\n            <div className=\"tile is-child box is-success\">\n              <div className=\"block\">\n                <UserSelector\n                  users={users}\n                  selectedUser={selectedUser}\n                  setSelectedUser={setSelectedUser}\n                />\n              </div>\n\n              <div className=\"block\" data-cy=\"MainContent\">\n                {!selectedUser && (\n                  <p data-cy=\"NoSelectedUser\">\n                    No user selected\n                  </p>\n                )}\n\n                {arePostLoading && <Loader />}\n\n                {(!arePostLoading && isLoadingError) && (\n                  <div\n                    className=\"notification is-danger\"\n                    data-cy=\"PostsLoadingError\"\n                  >\n                    Something went wrong!\n                  </div>\n                )}\n\n                {noPostCondition && (\n                  <div\n                    className=\"notification is-warning\"\n                    data-cy=\"NoPostsYet\"\n                  >\n                    No posts yet\n                  </div>\n                )}\n\n                {postListCondition && (\n                  <PostsList\n                    posts={posts}\n                    selectedPost={selectedPost}\n                    setSelectedPost={setSelectedPost}\n                  />\n                )}\n              </div>\n            </div>\n          </div>\n\n          <div\n            data-cy=\"Sidebar\"\n            className={classNames(\n              'tile',\n              'is-parent',\n              'is-8-desktop',\n              'Sidebar',\n              { 'Sidebar--open': selectedPost },\n            )}\n          >\n            <div className=\"tile is-child box is-success \">\n              {selectedPost && (\n                <PostDetails\n                  title={selectedPost.title}\n                  body={selectedPost.body}\n                  id={selectedPost.id}\n                />\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n    </main>\n  );\n};\n","import { User } from '../types/User';\nimport { client } from '../utils/fetchClient';\n\nexport const getUsers = () => {\n  return client.get<User[]>('/users');\n};\n","import { Post } from '../types/Post';\nimport { client } from '../utils/fetchClient';\n\nexport const getPosts = (userId: number) => {\n  return client.get<Post[]>(`/posts?userId=${userId}`);\n};\n","import ReactDOM from 'react-dom';\n\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}